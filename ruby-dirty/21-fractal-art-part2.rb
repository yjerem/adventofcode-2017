rules = {}
DATA.readlines.each do |line|
  pattern, enhanced = line.strip.split(' => ')
  pattern = pattern.split('/').map(&:chars)
  enhanced = enhanced.split('/').map(&:chars)
  rules[pattern] = enhanced
end

def rotate(pat)
  pat.transpose.map(&:reverse)
end

def flip(pat)
  pat.map(&:reverse)
end

def rule_match(pat, rules)
  enhanced = nil
  [pat, rotate(pat), rotate(rotate(pat)), rotate(rotate(rotate(pat))),
  flip(pat), rotate(flip(pat)), rotate(rotate(flip(pat))), rotate(rotate(rotate(flip(pat))))].each do |patpat|
    if rules[patpat]
      enhanced = rules[patpat]
      break
    end
  end
  enhanced
end

pic = '.#./..#/###'.split('/').map(&:chars)

18.times do |k|
  if pic.length % 2 == 0
    square_size = 2
  else
    square_size = 3
  end

  new_pic = []
  new_square_size = square_size + 1
  new_size = pic.length / square_size * new_square_size
  new_size.times do |i|
    new_pic.push((' ' * new_size).chars)
  end

  (pic.length / square_size).times do |y|
    (pic[0].length / square_size).times do |x|
      square = []
      square_size.times do |yy|
        square.push(pic[y*square_size + yy][(x*square_size)...(x*square_size+square_size)])
      end

      if enhanced = rule_match(square, rules)
        new_square_size.times do |yy|
          new_pic[y*new_square_size + yy][(x*new_square_size)...(x*new_square_size+new_square_size)] = enhanced[yy]
        end
      else
        puts 'oh, something didnt match'
      end
    end
  end

  pic = new_pic.map(&:dup)
end

p pic.flatten.count('#')

__END__
../.. => ##./##./.##
#./.. => .../.#./##.
##/.. => .../.##/#.#
.#/#. => ##./#../#..
##/#. => .##/#.#/#..
##/## => ..#/.#./.##
.../.../... => #.../.##./...#/#...
#../.../... => ...#/..../..#./..##
.#./.../... => ..../.##./###./....
##./.../... => ###./#.##/..#./..#.
#.#/.../... => #.../.#../#..#/..#.
###/.../... => ..##/.##./#.../....
.#./#../... => #.##/..../..../#.##
##./#../... => .#.#/.#.#/##../.#..
..#/#../... => .###/####/.###/##..
#.#/#../... => ..../.#.#/..../####
.##/#../... => .##./##.#/.###/#..#
###/#../... => ####/...#/###./.###
.../.#./... => ..##/#..#/###./###.
#../.#./... => ###./..##/.#.#/.#.#
.#./.#./... => ..#./..#./##.#/##..
##./.#./... => #..#/###./..#./#.#.
#.#/.#./... => .###/#.../.#.#/.##.
###/.#./... => #.##/##../#.#./...#
.#./##./... => #.##/#.##/#.##/.###
##./##./... => ..##/#..#/.###/....
..#/##./... => #..#/.##./##../####
#.#/##./... => ###./###./..##/..##
.##/##./... => ###./##.#/.##./###.
###/##./... => ##../#..#/##../....
.../#.#/... => ##.#/..#./..##/##..
#../#.#/... => #..#/.###/.#../#.#.
.#./#.#/... => ####/#.##/.###/###.
##./#.#/... => #.../####/...#/.#.#
#.#/#.#/... => ...#/.#.#/#..#/#.##
###/#.#/... => ###./#.##/##.#/..##
.../###/... => ..../##.#/.#../..##
#../###/... => ####/..##/.##./.###
.#./###/... => #.#./#.#./#.../#..#
##./###/... => #..#/..##/#.##/#.#.
#.#/###/... => .##./##.#/.#../####
###/###/... => ####/##.#/.#../#.#.
..#/.../#.. => #..#/#.##/.###/.###
#.#/.../#.. => .##./#.../.#.#/....
.##/.../#.. => .#.#/.#.#/##../####
###/.../#.. => .#.#/.##./####/##.#
.##/#../#.. => .###/.###/.###/#...
###/#../#.. => ..##/#.../#.#./..#.
..#/.#./#.. => #.#./##../##../####
#.#/.#./#.. => ..../..##/#..#/..#.
.##/.#./#.. => #.##/#..#/##.#/.##.
###/.#./#.. => ...#/#.../#.#./.#..
.##/##./#.. => .##./#..#/.##./...#
###/##./#.. => ##.#/##.#/.##./...#
#../..#/#.. => ##../..#./..#./#.#.
.#./..#/#.. => #.#./##../#..#/#.##
##./..#/#.. => #.##/###./###./.#.#
#.#/..#/#.. => ..../...#/...#/#..#
.##/..#/#.. => #..#/#.#./..##/.##.
###/..#/#.. => ##../.#.#/.#../#.#.
#../#.#/#.. => ####/.##./.##./.##.
.#./#.#/#.. => ...#/.##./..#./.##.
##./#.#/#.. => .#.#/.##./..#./.#.#
..#/#.#/#.. => .#../##.#/##../#...
#.#/#.#/#.. => .#.#/..#./#.../##..
.##/#.#/#.. => ..#./#.#./###./#...
###/#.#/#.. => ..../#.#./..##/##.#
#../.##/#.. => .##./##../.#../..##
.#./.##/#.. => ##../#.#./#.../####
##./.##/#.. => ###./###./#.#./..##
#.#/.##/#.. => ...#/#..#/..#./###.
.##/.##/#.. => ..##/####/..../#.##
###/.##/#.. => .#.#/#.../.##./#...
#../###/#.. => ..#./.#.#/#..#/.##.
.#./###/#.. => ####/..../####/#.##
##./###/#.. => .###/..../#.#./####
..#/###/#.. => ###./#.#./.#.#/#...
#.#/###/#.. => #.#./#.#./..##/.##.
.##/###/#.. => #.##/.###/.##./#.##
###/###/#.. => #..#/.#../.#../.##.
.#./#.#/.#. => .#../.##./##../..##
##./#.#/.#. => .##./#.##/...#/#.#.
#.#/#.#/.#. => ##.#/###./#.#./..#.
###/#.#/.#. => ..../##../.###/###.
.#./###/.#. => .#.#/.###/..../#..#
##./###/.#. => #.../..#./#..#/.#..
#.#/###/.#. => .#../##.#/##.#/.###
###/###/.#. => #..#/.#.#/#.#./..#.
#.#/..#/##. => .#../.###/...#/#.##
###/..#/##. => ...#/...#/..##/...#
.##/#.#/##. => #.#./###./.##./####
###/#.#/##. => #.#./...#/...#/....
#.#/.##/##. => ###./#.../##.#/..#.
###/.##/##. => .#../#.../.###/.#..
.##/###/##. => #.../..#./..#./.###
###/###/##. => .#../.#../####/###.
#.#/.../#.# => ##.#/##../...#/##.#
###/.../#.# => ###./###./#..#/###.
###/#../#.# => .###/..#./.#../#...
#.#/.#./#.# => ##.#/.##./.#.#/##.#
###/.#./#.# => ...#/...#/#.##/.##.
###/##./#.# => #.../##../#.../....
#.#/#.#/#.# => ####/.#../..##/..##
###/#.#/#.# => ##../####/#.##/..##
#.#/###/#.# => ##../..../..../####
###/###/#.# => .#../.#.#/.###/.#.#
###/#.#/### => ##../####/###./...#
###/###/### => ###./#..#/##../.##.
